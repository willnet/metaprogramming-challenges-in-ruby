// Hierarchy Q3
export const problem = {
  "section": "02_object_model",
  "id": "02_hierarchy_q3",
  "title": "Hierarchy Q3",
  "title_en": "Hierarchy Q3",
  "detailedDescription": "前提: M1, M2, M3, M4モジュールは変更しないこと\n\n次の動作をする C3 class, MySuperClass class を実装する\n- C3.ancestors.first(6) が [M1, C3, M2, M3, MySuperClass, M4] となる\n- C3.new.name が 'M1' を返す",
  "detailedDescription_en": "Premise: Do not modify the M1, M2, M3, and M4 module.\n\nImplement C3 class and MySuperClass class that behave as follows\n- C3.ancestors.first(6) returns [M1, C3, M2, M3, MySuperClass, M4]\n- C3.new.name returns 'M1'",
  "problemCode": "module M1\n  def name\n    'M1'\n  end\nend\n\nmodule M2\n  def name\n    'M2'\n  end\nend\n\nmodule M3\n  def name\n    'M3'\n  end\nend\n\nmodule M4\n  def name\n    'M4'\n  end\nend\n\nclass C3\n  def name\n    'C3'\n  end\nend\n",
  "answerCode": "module M1\n  def name\n    'M1'\n  end\nend\n\nmodule M2\n  def name\n    'M2'\n  end\nend\n\nmodule M3\n  def name\n    'M3'\n  end\nend\n\nmodule M4\n  def name\n    'M4'\n  end\nend\n\nclass MySuperClass\n  include M4\nend\n\nclass C3 < MySuperClass\n  prepend M1\n  include M3\n  include M2\n\n  def name\n    'C3'\n  end\nend\n",
  "testCode": "require 'minitest'\n\nclass TestHierarchy < Minitest::Test\n  def test_c3_ancestors\n    assert_equal [M1, C3, M2, M3, MySuperClass, M4], C3.ancestors.first(6)\n  end\n\n  def test_c3_name\n    assert_equal 'M1', C3.new.name\n  end\n\n  def test_c3_super_class\n    assert MySuperClass.is_a?(Class)\n  end\nend\n\ndef run_tests\n  parallel_executor = Object.new\n  def parallel_executor.shutdown\n    # nothing\n  end\n  Minitest.parallel_executor = parallel_executor\n  Minitest.run\nend\n",
  "answerExplanation": "この問題は、複数のモジュールのinclude/prependと継承を組み合わせた場合の継承チェーンの順序を理解することが重要です。\n\n継承チェーンの構築ルール：\n1. `prepend`されたモジュールは、クラスの前に配置される\n2. `include`されたモジュールは、クラスの後に配置される（後からincludeしたものが先）\n3. スーパークラスとそのモジュールは、現在のクラスのモジュールの後に配置される\n\nこの問題では：\n- M1は`prepend`されているため、最初に来る\n- 次にC3クラス自体\n- M2とM3は`include`の逆順で配置される（M2、M3の順）\n- 最後にMySuperClassとそれにincludeされたM4が来る\n\n結果として、M1の`name`メソッドが最初に見つかるため、'M1'が返されます。",
  "answerExplanation_en": "This quiz requires understanding the order of the inheritance chain when combining multiple module include/prepend operations with inheritance.\n\nRules for building the inheritance chain:\n1. `prepend`ed modules are placed before the class\n2. `include`d modules are placed after the class (later includes come first)\n3. The superclass and its modules are placed after the current class's modules\n\nIn this quiz:\n- M1 comes first because it's `prepend`ed\n- Then the C3 class itself\n- M2 and M3 are placed in reverse order of inclusion (M2, then M3)\n- Finally, MySuperClass and its included M4\n\nAs a result, the `name` method from M1 is found first, so 'M1' is returned."
};
