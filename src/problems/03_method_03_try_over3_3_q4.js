// Try Over3 3 Q4
export const problem = {
  "section": "03_method",
  "id": "03_try_over3_3_q4",
  "title": "Try Over3 3 Q4",
  "description": "高度なメタプログラミング技術の問題。method_missing、プロキシオブジェクト、const_missing、DSLの実装などを学びます。 (Q4)",
  "problemCode": "TryOver3 = Module.new\n\n# Q4\n# 以下のように実行できる TryOver3::A4 クラスを作成してください。\n# TryOver3::A4.runners = [:Hoge]\n# TryOver3::A4::Hoge.run\n# # => \"run Hoge\"\n# このとき、TryOver3::A4::Hogeという定数は定義されません。\n\n\n# Q5. チャレンジ問題！ 挑戦する方はテストの skip を外して挑戦してみてください。\n#\n# TryOver3::TaskHelper という include すると task というクラスマクロが与えられる以下のようなモジュールがあります。\nmodule TryOver3::TaskHelper\n  def self.included(klass)\n    klass.define_singleton_method :task do |name, &task_block|\n      new_klass = Class.new do\n        define_singleton_method :run do\n          puts \"start #{Time.now}\"\n          block_return = task_block.call\n          puts \"finish #{Time.now}\"\n          block_return\n        end\n      end\n      new_klass_name = name.to_s.split(\"_\").map{ |w| w[0] = w[0].upcase; w }.join\n      const_set(new_klass_name, new_klass)\n    end\n  end\nend\n\n# TryOver3::TaskHelper は include することで以下のような使い方ができます\nclass TryOver3::A5Task\n  include TryOver3::TaskHelper\n\n  task :foo do\n    \"foo\"\n  end\nend\n# irb(main):001:0> TryOver3::A3Task::Foo.run\n# start 2020-01-07 18:03:10 +0900\n# finish 2020-01-07 18:03:10 +0900\n# => \"foo\"\n\n# 今回 TryOver3::TaskHelper では TryOver3::A5Task::Foo のように Foo クラスを作らず\n# TryOver3::A5Task.foo のようにクラスメソッドとして task で定義された名前のクラスメソッドでブロックを実行するように変更したいです。\n# 現在 TryOver3::TaskHelper のユーザには TryOver3::A5Task::Foo.run のように生成されたクラスを使って実行しているユーザが存在します。\n# 今回変更を加えても、その人たちにはこれまで通り生成されたクラスのrunメソッドでタスクを実行できるようにしておいて、\n# warning だけだしておくようにしたいです。\n# TryOver3::TaskHelper を修正してそれを実現してください。 なお、その際、クラスは実行されない限り生成されないものとします。\n#\n# 変更後想定する使い方\n# メソッドを使ったケース\n# irb(main):001:0> TryOver3::A5Task.foo\n# start 2020-01-07 18:03:10 +0900\n# finish 2020-01-07 18:03:10 +0900\n# => \"foo\"\n#\n# クラスのrunメソッドを使ったケース\n# irb(main):001:0> TryOver3::A5Task::Foo.run\n# Warning: TryOver3::A5Task::Foo.run is deprecated\n# start 2020-01-07 18:03:10 +0900\n# finish 2020-01-07 18:03:10 +0900\n# => \"foo\"",
  "answerCode": "TryOver3 = Module.new\n\n# Q4. 問題の解説\n#\n# const_missingを利用して、runners=で定義した定数を参照したときにrunメソッドを持つオブジェクトを返すことで\n# 仕様を満たしています。回答例ではObject.newでオブジェクトを生成しましたが、runメソッドを持つオブジェクトであれば\n# どんなクラスのインスタンスでもOKです。\n#\nclass TryOver3::A4\n  def self.const_missing(const)\n    if @consts.include?(const)\n      obj = Object.new\n      obj.define_singleton_method(:run) { \"run #{const}\" }\n      obj\n    else\n      super\n    end\n  end\n\n  def self.runners=(consts)\n    @consts = consts\n  end\nend",
  "testCode": "require 'minitest'\nrequire 'minitest/mock'\n\nclass TestTryOver03Q1 < Minitest::Test\ndef test_q4_call_class\n    TryOver3::A4.runners = [:Hoge]\n    assert_equal \"run Hoge\", TryOver3::A4::Hoge.run\n  end\n\ndef test_q4_raise_error_when_called_not_runner_class\n    TryOver3::A4.runners = [:Hoge]\n    assert_raises(NameError) { TryOver3::A4::Foo }\n  end\n\ndef test_q4_not_exists_runner_class\n    TryOver3::A4.runners = [:Hoge]\n    refute_includes(TryOver3::A4.constants, :Hoge)\n  end\nend\n\ndef run_tests\n  parallel_executor = Object.new\n  def parallel_executor.shutdown\n    # nothing\n  end\n  Minitest.parallel_executor = parallel_executor\n  Minitest.run\nend"
};
