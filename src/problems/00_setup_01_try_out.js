// TryOut
export const problem = {
  "section": "00_setup",
  "id": "01_try_out",
  "title": "TryOut",
  "description": "基本的なクラス実装の練習。コンストラクタ、メソッド、アクセサなどの基本的な機能を実装します。",
  "problemCode": "class TryOut\n  # このクラスの仕様\n  # コンストラクタは、2つまたは3つの引数を受け付ける。引数はそれぞれ、ファーストネーム、ミドルネーム、ラストネームの順で、ミドルネームは省略が可能。\n  # full_nameメソッドを持つ。これは、ファーストネーム、ミドルネーム、ラストネームを半角スペース1つで結合した文字列を返す。ただし、ミドルネームが省略されている場合に、ファーストネームとラストネームの間には1つのスペースしか置かない\n  # first_name=メソッドを持つ。これは、引数の内容でファーストネームを書き換える。\n  # upcase_full_nameメソッドを持つ。これは、full_nameメソッドの結果をすべて大文字で返す。このメソッドは副作用を持たない。\n  # upcase_full_name! メソッドを持つ。これは、upcase_full_nameの副作用を持つバージョンで、ファーストネーム、ミドルネーム、ラストネームをすべて大文字に変え、オブジェクトはその状態を記憶する\nend",
  "answerCode": "# 問題の解説\n#\n# ミドルネームが渡されないことがある、というのをどう扱うかがこの問題のポイントです。\n# `def initialize(first_name, middle_name = nil, last_name)`のようにメソッドを定義することで\n# 簡潔に仕様を満たすことができます。\n# あとはスペースで各要素を区切るやり方としてArray#joinを使っているのもポイントです。\n# これ以外にも複数の解法があります。この回答通りになっていなくても問題ありません。\nclass TryOut\n  attr_writer :first_name\n\n  def initialize(first_name, middle_name = nil, last_name)\n    @first_name = first_name\n    @middle_name = middle_name\n    @last_name = last_name\n  end\n\n  def full_name\n    [@first_name, @middle_name, @last_name].compact.join(' ')\n  end\n\n  def upcase_full_name\n    full_name.upcase\n  end\n\n  def upcase_full_name!\n    @first_name.upcase!\n    @middle_name&.upcase!\n    @last_name.upcase!\n    full_name\n  end\nend",
  "testCode": "require 'minitest'\n\nclass TryOutTest < Minitest::Test\n  def test_first_last_name\n    target = TryOut.new(\"John\", \"Wick\")\n    assert_equal \"John Wick\", target.full_name\n  end\n\n  def test_first_middle_last_name\n    target = TryOut.new(\"Keanu\", \"Charies\",  \"Reeves\")\n    assert_equal \"Keanu Charies Reeves\", target.full_name\n  end\n\n  def test_first_name_accessor\n    target = TryOut.new(\"Henrik\", \"Vanger\")\n    target.first_name = \"Martin\"\n    assert_equal \"Martin Vanger\", target.full_name\n  end\n\n  def test_upcase_full_name\n    target = TryOut.new(\"Arthur\", \"Fleck\")\n    assert_equal \"ARTHUR FLECK\", target.upcase_full_name\n  end\n\n  def test_upcase_full_name_no_side_effect\n    target = TryOut.new(\"Lorraine\", \"Broughton\")\n    target.upcase_full_name\n    assert_equal \"Lorraine Broughton\", target.full_name\n  end\n\n  def test_upcase_full_name_bang\n    target = TryOut.new(\"Earl\", \"Stone\")\n    assert_equal \"EARL STONE\", target.upcase_full_name!\n  end\n\n  def test_upcase_full_name_bang_has_side_effect\n    target = TryOut.new(\"Murphy\", \"McManus\")\n    target.upcase_full_name!\n    assert_equal \"MURPHY MCMANUS\", target.full_name\n  end\n\n  def test_too_few_arguments\n    assert_raises (ArgumentError) {TryOut.new(\"John\")}\n  end\n\n  def test_too_many_arguments\n    assert_raises (ArgumentError) {TryOut.new(\"John\", \"Milton\", \"Cage\", \"Jr\")}\n  end\nend\n\n# 明示的にテストを実行するためのコード\ndef run_tests\n  parallel_executor = Object.new\n  def parallel_executor.shutdown\n    # nothing\n  end\n  Minitest.parallel_executor = parallel_executor\n  Minitest.run\nend"
};
