// Simple Bot
export const problem = {
  "section": "04_block",
  "id": "03_simple_bot",
  "title": "Simple Bot",
  "title_en": "Simple Bot",
  "description": "ブロックを使ったDSLの作成問題。ボット作成のためのDSLを実装して、respond、setting、settingsメソッドを学びます。",
  "description_en": "A DSL creation problem using blocks. Implement a DSL for bot creation and learn about respond, setting, and settings methods.",
  "detailedDescription": "次の仕様を満たすSimpleBotクラスとDSLを作成してください\n\nこれは、作成するSimpleBotクラスの利用イメージです\n\n```\nclass Bot < SimpleBot\n  setting :name, 'bot'\n  respond 'keyword' do\n    \"response #{settings.name}\"\n  end\nend\n\nBot.new.ask('keyword') #=> 'respond bot'\n```\n\n1. SimpleBotクラスを継承したクラスは、クラスメソッドrespond, setting, settingsを持ちます\n    1. settingsメソッドは、任意のオブジェクトを返します\n    2. settingsメソッドは、後述するクラスメソッドsettingによって渡された第一引数と同名のメソッド呼び出しに応答します\n2. SimpleBotクラスのサブクラスのインスタンスは、インスタンスメソッドaskを持ちます\n    1. askは、一つの引数をとります\n    2. askに渡されたオブジェクトが、後述するrespondメソッドで設定したオブジェクトと一致する場合、インスタンスは任意の返り値を持ちます\n    3. 2のケースに当てはまらない場合、askメソッドの戻り値はnilです\n3. クラスメソッドrespondは、keywordとブロックを引数に取ります\n    1. respondメソッドの第1引数keywordと同じ文字列が、インスタンスメソッドaskに渡された時、第2引数に渡したブロックが実行され、その結果が返されます\n4. クラスメソッドsettingは、引数を2つ取り、1つ目がキー名、2つ目が設定する値です\n    1. settingメソッドに渡された値は、クラスメソッド `settings` から返されるオブジェクトに、メソッド名としてアクセスすることで取り出すことができます\n    2. e.g. クラス内で `setting :name, 'bot'` と実行した場合は、respondメソッドに渡されるブロックのスコープ内で `settings.name` の戻り値は `bot` の文字列になります",
  "detailedDescription_en": "Create a SimpleBot class and DSL that meet the following specifications\n\nThis is how the SimpleBot class you create will be used:\n\n```\nclass Bot < SimpleBot\n  setting :name, 'bot'\n  respond 'keyword' do\n    \"response #{settings.name}\"\n  end\nend\n\nBot.new.ask('keyword') #=> 'respond bot'\n```\n\n1. Classes that inherit from SimpleBot have class methods respond, setting, and settings\n    1. The settings method returns an arbitrary object\n    2. The settings method responds to method calls with the same name as the first argument passed by the setting class method described later\n2. Instances of SimpleBot subclasses have an instance method ask\n    1. ask takes one argument\n    2. When the object passed to ask matches the object set by the respond method described later, the instance has an arbitrary return value\n    3. If case 2 does not apply, the return value of the ask method is nil\n3. The class method respond takes a keyword and a block as arguments\n    1. When the same string as the first argument keyword of the respond method is passed to the instance method ask, the block passed as the second argument is executed and its result is returned\n4. The class method setting takes two arguments, the first being the key name and the second being the value to set\n    1. Values passed to the setting method can be retrieved by accessing them as method names from the object returned by the `settings` class method\n    2. e.g. If `setting :name, 'bot'` is executed in the class, the return value of `settings.name` within the scope of the block passed to the respond method will be the string `bot`",
  "problemCode": "",
  "answerExplanation": "問題の解説\n\nrespondクラスメソッドで定義したブロックを、askインスタンスメソッドからどうやって参照するか、というのが\nこの問題の難所です。クラスメソッドで定義したインスタンス変数はクラスインスタンス変数としてクラスそのものに\n紐づくインスタンス変数になるので、インスタンスメソッドから参照するには、回答例のように\n`self.class.instance_variable_get(インスタンス変数名)`のようにします。\nクラス変数を利用するとクラスメソッド、インスタンスメソッドどちらからでも`@@respond`のようにアクセスできるので\n一見便利ですが、意図せず別のクラスとクラス変数が共有される可能性があるため、推奨しません。\n\nSimpleBotとそのサブクラスで利用イメージのように定義されたブロックは、settingsクラスメソッドにアクセスできます。\nsettingsクラスメソッドは、settingクラスメソッドで登録したキーと値をそれぞれメソッド名とその返り値に持つオブジェクトを返すと\n仕様を満たせます。メソッドが定義できればどんなオブジェクトを返しても仕様を満たせるため、この回答例では\n特異メソッドを定義したObjectインスタンスを返しています。必ずしもObjectインスタンスである必要はありません。",
  "answerExplanation_en": "Problem Explanation\n\nThe difficult part of this problem is how to reference the block defined by the respond class method from the ask instance method.\nInstance variables defined in class methods become class instance variables tied to the class itself,\nso to reference them from instance methods, you need to use `self.class.instance_variable_get(instance_variable_name)` as in the answer example.\nUsing class variables might seem convenient because you can access them as `@@respond` from both class methods and instance methods,\nbut this is not recommended because class variables might be unintentionally shared with other classes.\n\nBlocks defined as in the usage example in SimpleBot and its subclasses can access the settings class method.\nThe settings class method satisfies the specification by returning an object that has keys and values registered by the setting class method\nas method names and their return values respectively. Since the specification can be satisfied as long as methods can be defined,\nthis answer example returns an Object instance with singleton methods defined. It doesn't necessarily have to be an Object instance.",
  "answerCode": "class SimpleBot\n  class << self\n    def respond(keyword, &block)\n      @respond ||= {}\n      @respond[keyword] = block\n    end\n\n    def setting(key, value)\n      @settings ||= {}\n      @settings[key] = value\n    end\n\n    def settings\n      obj = Object.new\n\n      @settings&.each do |key, value|\n        obj.define_singleton_method(key) do\n          value\n        end\n      end\n      obj\n    end\n  end\n\n  def ask(keyword)\n    block = self.class.instance_variable_get(:@respond)[keyword]\n    block.call if block\n  end\nend",
  "testCode": "require 'minitest'\n\nclass TestSimpleBot < Minitest::Test\n  def bot_for_test(&block)\n    Class.new(SimpleBot, &block)\n  end\n\n  def test_response\n    klass = bot_for_test do\n      respond 'hello' do\n        'Yo'\n      end\n    end\n\n    assert_equal 'Yo', klass.new.ask('hello')\n  end\n\n  def test_no_response\n    klass = bot_for_test do\n      respond 'yo' do\n        'yo'\n      end\n    end\n\n    assert_nil klass.new.ask(\"hello\")\n  end\n\n  def test_global_setting\n    klass = bot_for_test do\n      setting :name, 'bot'\n      respond 'what is your name?' do\n        \"i'm #{settings.name}\"\n      end\n    end\n\n    assert_equal \"i'm bot\", klass.new.ask(\"what is your name?\")\n  end\n\n  def test_global_setting_random\n    code = SecureRandom.hex\n\n    klass = bot_for_test do\n      setting :code, code\n      respond 'tell me your code' do\n        \"code is #{settings.code}\"\n      end\n    end\n\n    assert_equal \"code is #{code}\", klass.new.ask('tell me your code')\n  end\n\n  def test_global_setting_multiple_call\n    klass = bot_for_test do\n      setting :name, 'bot'\n      setting :age, 10\n      respond 'what is your name?' do\n        \"i'm #{settings.name}\"\n      end\n      respond 'how old are you?' do\n        \"i'm #{settings.age} years old\"\n      end\n    end\n\n    assert_equal \"i'm bot\", klass.new.ask(\"what is your name?\")\n    assert_equal \"i'm 10 years old\", klass.new.ask(\"how old are you?\")\n  end\nend\n\n# 明示的にテストを実行するためのコード\ndef run_tests\n  parallel_executor = Object.new\n  def parallel_executor.shutdown\n    # nothing\n  end\n  Minitest.parallel_executor = parallel_executor\n  Minitest.run\nend"
};
