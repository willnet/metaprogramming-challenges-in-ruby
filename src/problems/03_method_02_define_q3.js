// Define Q3
export const problem = {
  "section": "03_method",
  "id": "02_define_q3",
  "title": "Define Q3",
  "title_en": "Define Q3",
  "description": "includeされたときにカスタムアクセサメソッドを定義するOriginalAccessorモジュールを実装します。",
  "description_en": "Implement OriginalAccessor module that defines custom accessor methods when included.",
  "detailedDescription": "次の動作をする OriginalAccessor モジュール を実装する\n\n- OriginalAccessorモジュールはincludeされたときのみ、my_attr_accessorメソッドを定義すること\n- my_attr_accessorはgetter/setterに加えて、boolean値を代入した際のみ真偽値判定を行うaccessorと同名の?メソッドができること",
  "detailedDescription_en": "Implement OriginalAccessor module that behaves as follows\n\n- The OriginalAccessor module should define the my_attr_accessor method only when included\n- my_attr_accessor should create getter/setter methods, and additionally create predicate methods (with ? suffix) only when boolean values are assigned",
  "problemCode": "# Q3.\n# 次の動作をする OriginalAccessor モジュール を実装する\n# - OriginalAccessorモジュールはincludeされたときのみ、my_attr_accessorメソッドを定義すること\n# - my_attr_accessorはgetter/setterに加えて、boolean値を代入した際のみ真偽値判定を行うaccessorと同名の?メソッドができること\n\nmodule OriginalAccessor\n  # ここにコードを書く\nend",
  "answerExplanation": "",
  "answerExplanation_en": "",
  "answerCode": "# Q3.\n# 次の動作をする OriginalAccessor モジュール を実装する\n# - OriginalAccessorモジュールはincludeされたときのみ、my_attr_accessorメソッドを定義すること\n# - my_attr_accessorはgetter/setterに加えて、boolean値を代入した際のみ真偽値判定を行うaccessorと同名の?メソッドができること\n\nmodule OriginalAccessor\n  def self.included(base)\n    base.define_singleton_method(:my_attr_accessor) do |attr|\n      base.define_method attr do\n        @my_attr_accessor&.fetch(attr) { nil }\n      end\n\n      base.define_method \"#{attr}=\" do |value|\n        (@my_attr_accessor ||= {})[attr] = value\n\n        if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n          define_singleton_method \"#{attr}?\" do\n            !!value\n          end\n        end\n      end\n    end\n  end\nend",
  "testCode": "require 'minitest'\nrequire 'securerandom'\n\nclass TestDefine < Minitest::Test\n  begin\n    class A3\n      include OriginalAccessor\n      my_attr_accessor :hoge\n      my_attr_accessor :fuga\n    end\n  rescue\n  end\n\n  def test_answer_a3_define\n    assert_equal true, A3.methods.include?(:my_attr_accessor)\n  end\n\n  def test_answer_a3_string\n    instance = A3.new\n    instance.hoge = \"1\"\n\n    assert_equal false, instance.methods.include?(:hoge?)\n    assert_equal \"1\", instance.hoge\n  end\n\n  def test_answer_a3_number\n    instance = A3.new\n    instance.hoge = 1\n\n    assert_equal false, instance.methods.include?(:hoge?)\n    assert_equal 1, instance.hoge\n  end\n\n  def test_answer_a3_array\n    instance = A3.new\n    instance.hoge = [1, 2]\n\n    assert_equal false, instance.methods.include?(:hoge?)\n    assert_equal [1, 2], instance.hoge\n  end\n\n  def test_answer_a3_boolean_true\n    instance = A3.new\n    instance.hoge = true\n    assert_equal true, instance.methods.include?(:hoge?)\n    assert_equal true, instance.hoge?\n  end\n\n  def test_answer_a3_boolean_false\n    instance = A3.new\n    instance.hoge = false\n    assert_equal true, instance.methods.include?(:hoge?)\n    assert_equal false, instance.hoge?\n  end\n\n  def test_answer_a3_multiple\n    instance = A3.new\n    instance.hoge = \"hoge\"\n    instance.fuga = \"fuga\"\n    assert_equal \"hoge\", instance.hoge\n    assert_equal \"fuga\", instance.fuga\n  end\nend\n\ndef run_tests\n  parallel_executor = Object.new\n  def parallel_executor.shutdown\n    # nothing\n  end\n  Minitest.parallel_executor = parallel_executor\n  Minitest.run\nend"
};
