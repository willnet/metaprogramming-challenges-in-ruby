#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// ÂÄãÂà•„ÅÆÂïèÈ°å„Éï„Ç°„Ç§„É´„Åã„ÇâÂÖ®„Å¶„ÅÆÂïèÈ°å„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Çì„ÅßJSON„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
const problemsDir = path.join(__dirname, '../src/problems');
const outputPath = path.join(__dirname, '../test/problems.json');

// test „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
const testDir = path.join(__dirname, '../test');
if (!fs.existsSync(testDir)) {
  fs.mkdirSync(testDir, { recursive: true });
}

try {
  // src/problems „Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„ÅÆÂÖ®„Å¶„ÅÆ .js „Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
  const files = fs.readdirSync(problemsDir)
    .filter(file => file.endsWith('.js'))
    .sort(); // „Éï„Ç°„Ç§„É´Âêç„Åß„ÇΩ„Éº„Éà

  const allProblems = [];

  for (const file of files) {
    const filePath = path.join(problemsDir, file);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // export const problem = { ... } „ÅÆÂΩ¢Âºè„Åã„ÇâÂïèÈ°å„Éá„Éº„Çø„ÇíÊäΩÂá∫
    // Ë§áÊï∞Ë°å„Å´„Åæ„Åü„Åå„Çã„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÊ≠£„Åó„ÅèÊäΩÂá∫„Åô„Çã„Åü„ÇÅ„ÅÆÊ≠£Ë¶èË°®Áèæ
    const match = content.match(/export const problem = ({[\s\S]*?});/);
    
    if (match) {
      try {
        // Function constructor„Çí‰Ωø„Å£„Å¶ÂÆâÂÖ®„Å´Ë©ï‰æ°
        const problemData = new Function('return ' + match[1])();
        allProblems.push(problemData);
        console.log(`‚úì Loaded problem from ${file}`);
      } catch (error) {
        console.error(`‚úó Error parsing ${file}:`, error.message);
      }
    } else {
      console.warn(`‚ö† No problem data found in ${file}`);
    }
  }

  // „Çª„ÇØ„Ç∑„Éß„É≥„Å®ID„Åß„ÇΩ„Éº„Éà
  allProblems.sort((a, b) => {
    if (a.section !== b.section) {
      return a.section.localeCompare(b.section);
    }
    return a.id.localeCompare(b.id);
  });

  // JSON„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶Âá∫Âäõ
  fs.writeFileSync(outputPath, JSON.stringify(allProblems, null, 2));
  
  console.log(`\n‚ú® Generated ${outputPath}`);
  console.log(`üìä Total problems: ${allProblems.length}`);
  
  // „Çª„ÇØ„Ç∑„Éß„É≥„Åî„Å®„ÅÆÁµ±Ë®à„ÇíË°®Á§∫
  const sectionCounts = {};
  allProblems.forEach(problem => {
    sectionCounts[problem.section] = (sectionCounts[problem.section] || 0) + 1;
  });
  
  console.log('\nüìÅ Problems by section:');
  Object.entries(sectionCounts).forEach(([section, count]) => {
    console.log(`  - ${section}: ${count} problems`);
  });

} catch (error) {
  console.error('‚ùå Failed to generate problems.json:', error);
  process.exit(1);
}